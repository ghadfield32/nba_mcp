name: NBA MCP CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-type-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install black isort mypy pytest pytest-asyncio pytest-cov

    - name: Check code formatting with Black
      run: black --check --diff nba_mcp/

    - name: Check import sorting with isort
      run: isort --check-only --diff nba_mcp/

    - name: Type check with mypy
      run: mypy nba_mcp/ --ignore-missing-imports || true
      # || true allows continuation even if mypy finds issues (warn, don't fail)

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest pytest-asyncio pytest-cov

    - name: Run unit tests with coverage
      run: |
        pytest tests/ \
          --cov=nba_mcp \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=50 \
          -v
      continue-on-error: true
      # Allow tests to fail initially while building out test coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      if: matrix.python-version == '3.11'

  contract-tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install jsonschema

    - name: Validate response schemas
      run: |
        python -c "
        from nba_mcp.api.models import ResponseEnvelope, EntityReference
        import json

        # Validate ResponseEnvelope has JSON Schema
        schema = ResponseEnvelope.model_json_schema()
        assert 'properties' in schema, 'ResponseEnvelope missing schema'
        assert 'status' in schema['properties'], 'Missing status field'
        assert 'data' in schema['properties'], 'Missing data field'
        assert 'metadata' in schema['properties'], 'Missing metadata field'

        # Validate EntityReference schema
        entity_schema = EntityReference.model_json_schema()
        assert 'entity_type' in entity_schema['properties'], 'Missing entity_type'
        assert 'confidence' in entity_schema['properties'], 'Missing confidence'

        print('✓ All response schemas valid')
        "

    - name: Test response envelope creation
      run: |
        python -c "
        from nba_mcp.api.models import success_response, error_response

        # Test success response
        resp = success_response(data={'test': 'value'}, source='historical')
        assert resp.status == 'success'
        assert resp.data == {'test': 'value'}
        assert resp.metadata.version == 'v1'

        # Test error response
        err = error_response('TEST_ERROR', 'Test message')
        assert err.status == 'error'
        assert err.errors[0].code == 'TEST_ERROR'

        # Test deterministic JSON
        json_str = resp.to_json_string()
        assert 'status' in json_str

        print('✓ Response envelope contract tests passed')
        "

    - name: Test entity resolver contract
      run: |
        python -c "
        from nba_mcp.api.entity_resolver import resolve_entity
        from nba_mcp.api.errors import EntityNotFoundError

        # Test player resolution
        entity = resolve_entity('LeBron', entity_type='player')
        assert entity.entity_type == 'player'
        assert 0.0 <= entity.confidence <= 1.0
        assert entity.name is not None

        # Test team resolution
        entity = resolve_entity('Lakers', entity_type='team')
        assert entity.entity_type == 'team'
        assert entity.abbreviation is not None

        # Test not found raises correct exception
        try:
            resolve_entity('XYZ_INVALID_123', entity_type='player')
            assert False, 'Should have raised EntityNotFoundError'
        except EntityNotFoundError as e:
            assert e.code == 'ENTITY_NOT_FOUND'
            assert 'suggestions' in e.details

        print('✓ Entity resolver contract tests passed')
        "

  build:
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, contract-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel

    - name: Build package
      run: python -m build

    - name: Check package can be installed
      run: |
        pip install dist/*.whl
        python -c "import nba_mcp; print(f'✓ Package version: {nba_mcp.__version__ if hasattr(nba_mcp, \"__version__\") else \"0.5.0\"}')"
